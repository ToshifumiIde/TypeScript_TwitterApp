[{"/Users/idetoshifumi/Desktop/twitter-app/src/components/Auth.tsx":"1"},{"size":9009,"mtime":1612074970909,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"1afh8kz","/Users/idetoshifumi/Desktop/twitter-app/src/components/Auth.tsx",["7","8","9"],"import React, { useState } from \"react\";\nimport styles from \"./Auth.module.css\";\nimport { useDispatch } from \"react-redux\";\nimport { updateUserProfile } from \"../features/userSlice\";\nimport { auth, provider, storage } from \"../config/firebase\";\nimport {\n  Avatar,\n  Button,\n  CssBaseline,\n  TextField,\n  Paper,\n  Grid,\n  Link,\n  Typography,\n  makeStyles,\n  Modal,\n  IconButton,\n  Box,\n} from \"@material-ui/core\";\n\nimport SendIcon from \"@material-ui/icons/Send\";\nimport CameraIcon from \"@material-ui/icons/Camera\";\nimport EmailIcon from \"@material-ui/icons/Email\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {\"Copyright © \"}\n      <Link\n        color=\"inherit\"\n        href=\"https://toshifumiide-portfolio.web.app/\"\n        rel=\"noopener\"\n      >\n        Toshifumi Ide\n      </Link>{\" \"}\n      {new Date().getFullYear()}\n      {\".\"}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: \"100vh\",\n  },\n  image: {\n    backgroundImage:\n      \"url(https://images.unsplash.com/photo-1497215842964-222b430dc094?ixid=MXwxMjA3fDB8MHxzZWFyY2h8Mzh8fGJ1c2luZXNzfGVufDB8fDB8&ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=60)\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundColor:\n      theme.palette.type === \"light\"\n        ? theme.palette.grey[50]\n        : theme.palette.grey[900],\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center\",\n  },\n  paper: {\n    margin: theme.spacing(8, 4),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nconst Auth: React.FC = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const [email, setEmail] = useState<string>(\"\");\n  const [password, setPassword] = useState<string>(\"\");\n  const [username, setUserName] = useState<string>(\"\");\n  const [avatarImage, setAvatarImage] = useState<File | null>(null);\n  const [isLogin, setIsLogin] = useState<boolean>(true);\n\n  const signInEmail = async () => {\n    await auth.signInWithEmailAndPassword(email, password);\n  };\n  const signUpEmail = async () => {\n    const authUser = await auth.createUserWithEmailAndPassword(email, password);\n    let url = \"\";\n    if (avatarImage) {\n      const S =\n        \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n      const N = 16;\n      const randomChar = Array.from(crypto.getRandomValues(new Uint32Array(N)))\n        .map((n) => S[n % S.length])\n        .join(\"\");\n      const fileName = randomChar + \"_\" + avatarImage.name;\n      //firebaseの仕様で、元々あったファイル名と同様のファイル名が存在すると元々あったファイルが削除される。\n      //したがって、上記4つの処理を用いてユニークのfileNameを生成する\n      await storage.ref(`avatars/${fileName}`).put(avatarImage);\n      //生成したfileNameを用いて、refを生成し、avatarImageを.put()メソッドを用いて格納する\n      url = await storage.ref(\"avatars\").child(fileName).getDownloadURL();\n      //.getDownloadURL()で今格納した画像URLを取得可能\n    }\n    await authUser.user?.updateProfile({\n      displayName: username,\n      photoURL: url,\n      //firebaseが持つ.updateProfile()を用いて、authUserが持っているdisplayNameとphotoUrlを更新する\n    });\n    dispatch(\n      updateUserProfile({\n        displayName: username,\n        photoUrl: url,\n      })\n    );\n  };\n  const signInGoogle = async () => {\n    await auth.signInWithPopup(provider).catch((err) => {\n      alert(err.message);\n    });\n  };\n  const onChangeImageHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files![0]) {\n      setAvatarImage(e.target.files![0]);\n      //TypeScriptのNon-Nullアサーションオペレーター\n      //TypeScriptのコンパイラにnullまたはundefinedを追記することになる\n      //nullではないと明示するために!をつける\n      e.target.value = \"\";\n    }\n  };\n  return (\n    <Grid container component=\"main\" className={classes.root}>\n      <CssBaseline />\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\n      <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n        <div className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            {isLogin ? \"ログイン\" : \"ご登録\"}\n          </Typography>\n          <form className={classes.form} noValidate>\n            {!isLogin && (\n              <>\n                <TextField\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  required\n                  fullWidth\n                  id=\"username\"\n                  label=\"お名前\"\n                  name=\"username\"\n                  autoComplete=\"username\"\n                  autoFocus\n                  value={username}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setUserName(e.target.value);\n                  }}\n                />\n                <Box textAlign=\"center\">\n                  <IconButton>\n                    <label>\n                      <AccountCircleIcon\n                        fontSize=\"large\"\n                        className={\n                          avatarImage\n                            ? styles.login_addIconLoaded\n                            : styles.login_addIcon\n                        }\n                      />\n                      <input\n                        className={styles.login_hiddenIcon}\n                        type=\"file\"\n                        onChange={onChangeImageHandler}\n                      />\n                    </label>\n                  </IconButton>\n                </Box>\n              </>\n            )}\n\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"email\"\n              label=\"メールアドレス\"\n              name=\"email\"\n              autoComplete=\"email\"\n              autoFocus\n              value={email}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                setEmail(e.target.value);\n              }}\n            />\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"パスワード\"\n              type=\"password\"\n              id=\"password\"\n              autoComplete=\"current-password\"\n              value={password}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                setPassword(e.target.value);\n              }}\n            />\n            <Button\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n              startIcon={<EmailIcon />}\n              onClick={\n                isLogin\n                  ? async () => {\n                      try {\n                        await signInEmail();\n                      } catch (err) {\n                        alert(err.message);\n                      }\n                    }\n                  : async () => {\n                      try {\n                        await signUpEmail();\n                      } catch (err) {\n                        alert(err.message);\n                      }\n                    }\n              }\n            >\n              {isLogin ? \"ログイン\" : \"ご登録\"}\n            </Button>\n            <Grid container>\n              <Grid item xs={6}>\n                <span className={styles.login_reset} onClick={() => {}}>\n                  パスワードをお忘れですか？\n                </span>\n              </Grid>\n              <Grid item xs={false}>\n                <span\n                  className={styles.login_toggleMode}\n                  onClick={() => setIsLogin(!isLogin)}\n                >\n                  {isLogin ? \"アカウントを新たに作成\" : \"ログイン画面に移動\"}\n                </span>\n              </Grid>\n            </Grid>\n            <Button\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n              onClick={signInGoogle}\n            >\n              Googleアカウントでサインイン\n            </Button>\n            <Box mt={5}>\n              <Copyright />\n            </Box>\n          </form>\n        </div>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Auth;\n",{"ruleId":"10","severity":1,"message":"11","line":16,"column":3,"nodeType":"12","messageId":"13","endLine":16,"endColumn":8},{"ruleId":"10","severity":1,"message":"14","line":21,"column":8,"nodeType":"12","messageId":"13","endLine":21,"endColumn":16},{"ruleId":"10","severity":1,"message":"15","line":22,"column":8,"nodeType":"12","messageId":"13","endLine":22,"endColumn":18},"@typescript-eslint/no-unused-vars","'Modal' is defined but never used.","Identifier","unusedVar","'SendIcon' is defined but never used.","'CameraIcon' is defined but never used."]